{"name":"GeoBases","tagline":"Data services and visualization","body":"Introduction\r\n------------\r\n\r\nThis project provides tools to play with geographical data. It also\r\nworks with non-geographical data, except for map visualizations :).\r\n\r\nThere are embedded data sources in the project, but you can easily play\r\nwith your own data in addition to the available ones.\r\nAfter data loading, you can:\r\n\r\n-   perform various types of queries (find *this key*, or find keys\r\n    with *this property*)\r\n-   make *fuzzy searches* based on string distance (find things *roughly\r\n    named like this*)\r\n-   make *phonetic searches* (find things *sounding like this*)\r\n-   make *geographical searches* (find things *next to this place*)\r\n-   get results on a map, or export it as csv data, or as a Python\r\n    object\r\n\r\nThis is entirely written in Python. The core part is a Python package,\r\nbut there is a command line tool as well! Get it with *easy\\_install*,\r\nthen you can see where are airports with *international* in their name:\r\n\r\n```shell\r\n$ GeoBase --fuzzy international --map\r\n```\r\n\r\n![](https://raw.github.com/opentraveldata/geobases/public/examples/GeoBases-map-points.png)\r\n\r\nYou can perform all types of queries:\r\n```shell\r\n$ GeoBase --base cities --fuzzy \"san francisko\" # typo here :)\r\n```\r\n\r\nAnd of course, you can use your own data for map display:\r\n```shell\r\n$ cat coords.csv\r\np1,48.22,2.33\r\np2,49.33,2.24\r\n$ cat coords.csv | GeoBase --map\r\n```\r\n\r\nAnd for every other thing as well:\r\n```shell\r\n$ cat edges.csv\r\nA,B\r\nA,C\r\nD,A\r\n$ cat edges.csv | GeoBase --graph\r\n```\r\n\r\n![](https://raw.github.com/opentraveldata/geobases/public/examples/GeoBases-graph.png)\r\n\r\nWe are currently gathering input from the community to define the next\r\nversion features, so do not hesitate to open issues on the [github\r\npage](https://github.com/opentraveldata/geobases).\r\n\r\nDocumentation\r\n-------------\r\n\r\nHere is the [API\r\ndocumentation](https://geobases.readthedocs.org) for\r\nthe Python package. Check out the\r\n[wiki](https://github.com/opentraveldata/geobases/wiki) for any\r\nquestion!\r\n\r\nProject\r\n-------\r\n\r\n### Prerequisites\r\n\r\nThese prerequisites are very standard packages which are often installed\r\nby default on Linux distributions. But make sure you have them anyway.\r\n\r\nFirst you need to install *setuptools* (as *root*):\r\n\r\n```shell\r\n$ apt-get install python-setuptools    # for debian\r\n$ yum install python-setuptools.noarch # for fedora\r\n```\r\n\r\nThen you need some basics compilation stuff to compile dependencies\r\n(also as *root*):\r\n\r\n```shell\r\n$ apt-get install python-dev g++    # for debian\r\n$ yum install python-devel gcc-c++  # for fedora\r\n```\r\n\r\n### Installation\r\n\r\nYou can install it from [PyPI](http://pypi.python.org/pypi) with:\r\n\r\n```shell\r\n$ easy_install --user -U GeoBases\r\n```\r\n\r\nIf you want the development version, clone the project from\r\n[github](https://github.com/opentraveldata/geobases.git):\r\n\r\n```shell\r\n$ git clone https://github.com/opentraveldata/geobases.git\r\n```\r\n\r\nThen install the package and its dependencies:\r\n\r\n```shell\r\n$ cd geobases\r\n$ python setup.py install --user # for user space\r\n```\r\n\r\nA standalone script is put in `~/.local/bin`, to benefit from it, put\r\nthat in your `~/.bashrc` or `~/.zshrc`:\r\n\r\n```shell\r\nexport PATH=$PATH:$HOME/.local/bin\r\nexport BACKGROUND_COLOR=black # or 'white', your call\r\n```\r\n\r\n### Python 3 support\r\n\r\nThere is *Python 3* (not so) experimental support, you can\r\ntry it by *changing branch* before installation. Install setuptools and python3-dev as\r\nprerequisites, then:\r\n\r\n```shell\r\n$ git checkout 3000\r\n$ python3 setup.py install --user\r\n```\r\n\r\nYou can also install the package from [PyPI](http://pypi.python.org/):\r\n```shell\r\n$ easy_install-3.2 --user -U GeoBases3K\r\n```\r\n\r\n### Autocomplete\r\n\r\nIf you use zsh and want to benefit from the *autocomplete*, add this to\r\nyour `~/.zshrc`:\r\n\r\n```shell\r\n# Add custom completion scripts\r\nfpath=(~/.zsh/completion $fpath)\r\nautoload -U compinit\r\ncompinit\r\n```\r\n\r\nQuickstart\r\n----------\r\n\r\n```python\r\n>>> from GeoBases import GeoBase\r\n>>> geo_o = GeoBase(data='ori_por', verbose=False)\r\n>>> geo_a = GeoBase(data='airports', verbose=False)\r\n>>> geo_t = GeoBase(data='stations', verbose=False)\r\n```\r\n\r\nYou can provide other values for the *data* parameter. All data sources\r\nare documented in a single *yaml* file:\r\n\r\n-   *data=\"ori\\_por\"* will load a local version of [this\r\n    file](https://github.com/opentraveldata/optd/raw/trunk/refdata/ORI/ori_por_public.csv),\r\n    this is the most complete source for airports, use it!\r\n-   *data=\"ori\\_por\\_multi\"* is the same as previous, but the key for a\r\n    line is not the iata\\_code, but the concatenation of iata\\_code and\r\n    location\\_type. This feature makes every line unique, whereas\r\n    *ori\\_por* can have several lines for one iata\\_code\r\n-   *data=\"airports\"* will use geonames as data source for airports\r\n-   *data=\"stations\"* will use RFF data, from [the open data\r\n    website](http://www.data.gouv.fr), as data source for french train\r\n    stations\r\n-   *data=\"stations\\_nls\"* will use NLS nomenclature as data source for\r\n    french train stations\r\n-   *data=\"stations\\_uic\"* will use UIC nomenclature as data source for\r\n    french train stations\r\n-   *data=\"countries\"* will load data on countries\r\n-   *data=\"capitals\"* will load data on countries capitals\r\n-   *data=\"continents\"* will load data on continents\r\n-   *data=\"timezones\"* will load data on timezones\r\n-   *data=\"languages\"* will load data on languages\r\n-   *data=\"cities\"* will load data on cities, extracted from geonames\r\n-   *data=\"currencies\"* will load data on currencies, extracted from\r\n    wikipedia\r\n-   *data=\"airlines\"* will load data on airlines, extracted from [that\r\n    file](https://raw.github.com/opentraveldata/optd/trunk/refdata/ORI/ori_airlines.csv)\r\n-   *data=\"cabins\"* will load data on cabins\r\n-   *data=\"locales\"* will load data on locales\r\n-   *data=\"location\\_types\"* will load data on location types\r\n-   *data=\"feature\\_classes\"* will load data on feature classes\r\n-   *data=\"feature\\_codes\"* will load data on feature codes\r\n-   *data=\"ori\\_por\\_non\\_iata\"* will load some non-iata data excluded\r\n    from *ori\\_por*\r\n-   *data=\"geonames\\_MC\"* will load MC data of geonames\r\n-   *data=\"geonames\\_FR\"* will load FR data of geonames\r\n-   *data=\"postal\\_codes\\_MC\"* will load MC postal codes data\r\n-   *data=\"postal\\_codes\\_FR\"* will load FR postal codes data\r\n-   *data=\"feed\"* will create an empty instance\r\n\r\nAll features are unaware of the underlying data, and are available as\r\nlong as the headers are properly set in the configuration file, or from\r\nthe [Python API](https://geobases.readthedocs.org). For\r\ngeographical features, you have to name the latitude field `lat`, and\r\nthe longitude field `lng`.\r\n\r\nFeatures\r\n--------\r\n\r\n### Information access\r\n\r\n```python\r\n>>> geo_o.get('CDG', 'city_code')\r\n'PAR'\r\n>>> geo_o.get('BRU', 'name')\r\n'Bruxelles National'\r\n>>> geo_t.get('frnic', 'name')\r\n'Nice-Ville'\r\n>>> geo_t.get('fr_not_exist', 'name', default='NAME')\r\n'NAME'\r\n```\r\n\r\nYou can put your own data in a `GeoBase` class, either by loading your\r\nown file when creating the instance, or by creating an empty instance\r\nand using the `set` method.\r\n\r\n### Find things with properties\r\n\r\n```python\r\n>>> conditions = [('city_code', 'PAR'), ('location_type', 'H')]\r\n>>> list(geo_o.getKeysWhere(conditions, mode='and'))\r\n[(2, 'JDP'), (2, 'JPU')]\r\n>>>\r\n>>> conditions = [('city_code', 'PAR'), ('city_code', 'LON')]\r\n>>> len(list(geo_o.getKeysWhere(conditions, mode='or')))\r\n36\r\n```\r\n\r\n### Distance computation\r\n\r\n```python\r\n>>> geo_o.distance('CDG', 'NCE')\r\n694.5162...\r\n```\r\n\r\n### Find things near a geocode\r\n\r\n```python\r\n>>> # Paris, airports <= 40km\r\n>>> [k for _, k in sorted(geo_a.findNearPoint((48.84, 2.367), 40))]\r\n['ORY', 'LBG', 'TNF', 'CDG']\r\n>>>\r\n>>> # Nice, stations <= 4km\r\n>>> iterable = geo_t.findNearPoint((43.70, 7.26), 4)\r\n>>> [geo_t.get(k, 'name') for _, k in iterable]\r\n['Nice-Ville', 'Nice-St-Roch', 'Nice-Riquier']\r\n```\r\n\r\n### Find things near another thing\r\n\r\n```python\r\n>>> sorted(geo_a.findNearKey('ORY', 50)) # Orly, airports <= 50km\r\n[(0.0, 'ORY'), (18.8..., 'TNF'), (27.8..., 'LBG'), (34.8..., 'CDG')]\r\n>>>\r\n>>> sorted(geo_t.findNearKey('frnic', 3)) # Nice station, <= 3km\r\n[(0.0, 'frnic'), (2.2..., 'fr4342'), (2.3..., 'fr5737')]\r\n```\r\n\r\n### Find closest things from a geocode\r\n\r\n```python\r\n>>> list(geo_a.findClosestFromPoint((43.70, 7.26))) # Nice\r\n[(5.82..., 'NCE')]\r\n>>>\r\n>>> list(geo_a.findClosestFromPoint((43.70, 7.26), N=3)) # Nice\r\n[(5.82..., 'NCE'), (30.28..., 'CEQ'), (79.71..., 'ALL')]\r\n```\r\n\r\n### Approximate name matching\r\n\r\n```python\r\n>>> geo_t.fuzzyFind('Marseille Charles', 'name')[0]\r\n(0.8..., 'frmsc')\r\n>>> geo_a.fuzzyFind('paris de gaulle', 'name')[0]\r\n(0.78..., 'CDG')\r\n```\r\n\r\n### Map display\r\n\r\n```python\r\n>>> geo_t.visualize()\r\n* Added lines for duplicates linking, total 0\r\n> Affecting category None     to color blue    | volume 3190\r\n\r\n* Now you may use your browser to visualize:\r\nexample_map.html example_table.html\r\n\r\n* If you want to clean the temporary files:\r\nrm example.json ...\r\n\r\n(['example_map.html', 'example_table.html'], 2)\r\n```\r\n\r\n![](https://raw.github.com/opentraveldata/geobases/public/examples/GeoBases-map-circles.png)\r\n\r\nStandalone script\r\n-----------------\r\n\r\nInstallation of the package will also deploy a standalone script named\r\n`GeoBase`:\r\n\r\n```shell\r\n$ GeoBase ORY CDG              # query on the keys ORY and CDG\r\n$ GeoBase --closest CDG        # closest from CDG\r\n$ GeoBase --near LIG           # near LIG\r\n$ GeoBase --fuzzy marseille    # fuzzy search on 'marseille'\r\n$ GeoBase --help               # your best friend\r\n```\r\n\r\n![](https://raw.github.com/opentraveldata/geobases/public/examples/GeoBases-CLI-2.png)\r\n\r\nIn the previous picture, you have an overview of the command line\r\nverbose display. Three displays are available for the command line tool:\r\n\r\n-   the verbose display\r\n-   the csv display with `--quiet`\r\n-   the map display with `--map`\r\n\r\nWith the verbose display, entries are displayed on each column, and the\r\navailable fields on each line. Fields starting with `__` like\r\n`__field__` are special. This means they were added during data loading:\r\n\r\n-   `__key__` is the field containing the *id* of the entry. Ids are\r\n    defined with a list of fields in the configuration file.\r\n-   `__dup__` is the field containing a list of duplicated keys. Indeed\r\n    there is mechanism handling duplicated keys by default, which\r\n    creates new keys if the key already exists in the `GeoBase`.\r\n-   `__par__` is the field containing the parent key if the key is\r\n    duplicated.\r\n-   `__lno__` is the field containing the line number during loading.\r\n-   `__gar__` is the field containing the data which was not loaded on\r\n    the line (this can be because the line was not well formatted, or\r\n    because there were missing headers).\r\n\r\nMore examples here, for example how to do a search on a field, like\r\nadmin\\_code (`B8` is french riviera):\r\n\r\n```shell\r\n$ GeoBase -E adm1_code -e B8\r\n```\r\n\r\nSame with csv output (customize with `--show`):\r\n\r\n```shell\r\n$ GeoBase -E adm1_code -e B8 --quiet\r\n```\r\n\r\nMake a fuzzy search:\r\n\r\n```shell\r\n$ GeoBase --fuzzy sur mer\r\n```\r\n\r\nAll data under 200 km from Paris:\r\n\r\n```shell\r\n$ GeoBase --near PAR -N 200\r\n```\r\n\r\nMap display for a specific GMT offset:\r\n\r\n```shell\r\n$ GeoBase -E gmt_offset -e 1.0 --map\r\n```\r\n\r\nReading data input directly on stdin:\r\n\r\n```shell\r\n$ echo -e 'ORY^Orly\\nCDG^Charles' | GeoBase\r\n```","google":"UA-38361293-1","note":"Don't delete this file! It's used internally to help with page regeneration."}